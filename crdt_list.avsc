{
    "name": "OrderedList",
    "namespace": "com.flowprotocol.crdt",
    "type": "record",
    "doc": "Encapsulates all the persistent state needed by an ordered list replicated data type. Based on the RGA (Replicated Growable Array) construction, as described in: Hyun-Gul Roh, Myeongjae Jeon, Jin-Soo Kim, and Joonwon Lee: “Replicated abstract data types: Building blocks for collaborative applications,” Journal of Parallel and Distributed Computing, vol. 71, no. 3, pp. 354–368, Mar. 2011.",
    "fields": [
        {
            "name": "header",
            "doc": "Metadata about the list version as reflected in `elements` (not including items in the `queue`).",
            "type": "DataStructureHeader"
        },
        {
            "name": "elements",
            "doc": "The elements of the list, in correct application order, but including tombstones.",
            "default": [],
            "type": {
                "type": "array",
                "items": {
                    "name": "ListElement",
                    "type": "record",
                    "doc": "One element of an ordered list.",
                    "fields": [
                        {
                            "name": "id",
                            "doc": "Immutable identifier for this list element that was assigned when the element was inserted. It is unique within this list, but not globally unique. In fact, it is simply the version number of the operation that inserted it. Subsequent operations that need to refer to a list element use this identifier.",
                            "type": "VectorClockVersion"
                        },
                        {
                            "name": "valueVersion",
                            "doc": "The version identifier of the last operation that assigned this list element's value, or deleted it. Initially the same value as `id`.",
                            "type": "VectorClockVersion"
                        },
                        {
                            "name": "positionVersion",
                            "doc": "The version identifier of the last operation that modified this element's position in the list. Initially the same value as `id`.",
                            "type": "VectorClockVersion"
                        },
                        {
                            "name": "timestamp",
                            "doc": "The time at which this element was last modified (milliseconds since the epoch), according to the clock of the peer that performed the modification. For information only; not used for conflict resolution.",
                            "type": "long"
                        },
                        {
                            "name": "deleted",
                            "doc": "Initially false, and set to true when this list element is removed (becomes a tombstone). Note that in an ordered list, once an element has been deleted, it must never be undeleted again. You must insert a new element if the user changed their mind about deleting it. In principle, tombstones can be purged from the structure once we are sure that the deletion has propagated to all peers (and thus no peers are going to try referring to it ever again); however, in practice, it's difficult to be sure about propagation of operations, and so we currently don't support purging. This means that deleted elements must remain in the list forever (though their value can be set to null).",
                            "default": false,
                            "type": "boolean"
                        },
                        {
                            "name": "value",
                            "doc": "This should be a union of null and the declared list item type (transformed into CRDT).",
                            "type": ["null"]
                        }
                    ]
                }
            }
        },
        {
            "name": "queue",
            "doc": "List of operations that we have received from peers, but not yet applied, because they are not yet causally ready (based on their vector clocks).",
            "default": [],
            "type": {
                "type": "array",
                "items": {
                    "name": "ListOperation",
                    "type": "record",
                    "doc": "A list of modifications to an OrderedList data structure, made by a peer. They are applied atomically.",
                    "fields": [
                        {
                            "name": "writer",
                            "doc": "The unique identifier of the peer that issued this operation.",
                            "type": "PeerID"
                        },
                        {
                            "name": "targetObject",
                            "doc": "Metadata about the modified data structure, immediately after the modifications have been applied on the peer that generated them. If multiple modifications have been grouped together into one operation, the vector clock must be incremented for each modification.",
                            "type": "DataStructureHeader"
                        },
                        {
                            "name": "timestamp",
                            "doc": "The time at which this operation was issued (milliseconds since the epoch), according to the clock of the peer that performed the modifications. For information only; not used for conflict resolution.",
                            "type": "long"
                        },
                        {
                            "name": "modifications",
                            "doc": "List of modifications made to the data structure. They are applied sequentially, in the order they appear in this array.",
                            "type": {
                                "type": "array",
                                "items": [
                                    {
                                        "name": "ListInsert",
                                        "type": "record",
                                        "doc": "Records the fact that a peer modified an ordered list by inserting a new element somewhere.",
                                        "fields": [
                                            {
                                                "name": "precedingElement",
                                                "doc": "The `id` of the list element that came immediately before the newly inserted element, on the peer where it was inserted, at the time when it was inserted. `null` if the element was inserted at the beginning of the list.",
                                                "type": ["null", "VectorClockVersion"]
                                            },
                                            {
                                                "name": "value",
                                                "doc": "The value of the newly inserted element (transformed into CRDT).",
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    {
                                        "name": "ListUpdate",
                                        "type": "record",
                                        "doc": "Records the fact that a peer modified an ordered list by assigning a new value to a particular index in the list.",
                                        "fields": [
                                            {
                                                "name": "elementID",
                                                "doc": "The `id` of the list element whose value was replaced.",
                                                "type": "VectorClockVersion"
                                            },
                                            {
                                                "name": "value",
                                                "doc": "The list element's new value (transformed into CRDT).",
                                                "type": "null"
                                            }
                                        ]
                                    },
                                    {
                                        "name": "ListDelete",
                                        "type": "record",
                                        "doc": "Records the fact that a peer modified an ordered list by deleting an element from it.",
                                        "fields": [
                                            {
                                                "name": "elementID",
                                                "doc": "The `id` of the list element that was deleted.",
                                                "type": "VectorClockVersion"
                                            }
                                        ]
                                    },
                                    {
                                        "name": "ListRelocate",
                                        "type": "record",
                                        "doc": "Records the fact that a peer modified an ordered list by taking an existing object (from this list or another data structure) and moving it into this list. When the former parent data structure is the same list, this operation reorders list elements. When the former parent is some other data structure (not necessarily a list), the element is removed from that other structure at the same time as it is added to this list.",
                                        "fields": [
                                            {
                                                "name": "objectID",
                                                "doc": "The globally unique ID of the object that was moved into this list.",
                                                "type": "UUID"
                                            },
                                            {
                                                "name": "formerParent",
                                                "doc": "Metadata about the data structure that previously contained the relocated object, or null if the former parent is the current list (i.e. the elements within the list are being reordered). The vector clock is taken immediately after the relocated object has been removed from the former parent. The former parent's vector clock is also incremented.",
                                                "type": ["null", "DataStructureHeader"]
                                            },
                                            {
                                                "name": "precedingElement",
                                                "doc": "The `id` of the list element that came immediately before the moved element's new position, on the peer where the list was reordered, at the time when it was reordered. `null` if the element was moved to the beginning of the list.",
                                                "type": ["null", "VectorClockVersion"]
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ]
}
